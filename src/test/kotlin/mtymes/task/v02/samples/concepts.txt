Why
[ ] not only queue tasks but see inProgress info as well as history of retries/failures/cancellations for later analysis
[ ] when using separate queueing mechanism and separate persistence of progress, those two got out of sync
[ ] any node should be allowed to die, had some difficulties if that happened with other solutions (e.g.: artemis)
[ ] had some custom requirements which could not be supported OOTB by existing solutions and required workarounds
[ ] already used this approach for millions of tasks where they've been processed for multiple days
[ ] this one is generic enough, so it could be used for almost all of our existing solutions (or all with minor additional modifications)

Just explain
[ ] - Task
[ ] - Executions/ActiveExecution
Sample 01
[ ] - Worker - a bit smarter than a listener
[ ] - SweatShop - able to kill a worker if needed or embrace new fresh meat
Sample02
[ ] - Scheduler
[ ] - happy scenario - custom payload
[ ] - task to string
[ ] - delay if no task present
Sample03
[ ] - exception handling
[ ] - out of attempts
[ ] - failure / retry
[ ] - non-recoverable fail
[ ] - delayed retry
Sample04
[ ] - cancel task/execution
Sample05
[ ] - delayed start
[ ] - suspension
Sample06
[ ] - timed out execution/scheduled task
[ ] - heart beat
Sample07
[ ] - custom ordering
Sample08
[ ] - custom fetch criteria
Sample09
[ ] - invalid state transitions

What is still missing
[ ] - record only last execution
[ ] - unlimited executions

The tricky bit
[ ] - indexes
